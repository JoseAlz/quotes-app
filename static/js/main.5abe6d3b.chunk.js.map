{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","quotes","setQuotes","textRef","useRef","color","getQuote","fetch","then","res","json","data","randomNum","Math","floor","random","length","useEffect","current","style","className","ref","text","author","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAgDeA,EA7CH,WACV,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAUC,mBACZC,EAAO,CAAC,UAAW,UAAW,UAAW,UAAW,UAElDC,EAAW,WACfC,MAAM,+BACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAChDd,EAAUS,EAAKC,QAarB,OAVAK,qBAAU,WACRX,MACC,IAEHW,qBAAU,WACRd,EAAQe,QAAQC,MAAMd,MACtBA,EAAMQ,KAAKC,MAAMD,KAAKE,SAASV,EAAMW,WAEpC,CAACf,IAGF,qBAAKmB,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACE,mBAAGC,IAAKlB,EAAR,SAAkBF,EAAOqB,OACzB,yCAAYrB,EAAOsB,UACnB,sBAAKH,UAAU,eAAf,UACE,wBAAQI,QAASlB,EAAUc,UAAU,MAArC,uBACA,mBACEK,KAAM,mDACNC,OAAO,SACPC,IAAI,sBACJP,UAAU,MAJZ,4BCrBKQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.5abe6d3b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef} from \"react\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const [quotes, setQuotes] = useState(\"\");\n  const textRef = useRef();\n  let color =[\"#126E82\", \"#5EAAA8\", \"#810000\", \"#0A043C\", \"FF75A0\"];\n  \n  const getQuote = () => {\n    fetch(\"https://type.fit/api/quotes\")\n      .then((res) => res.json())\n      .then((data) => {\n        let randomNum = Math.floor(Math.random() * data.length);\n        setQuotes(data[randomNum]);\n      });\n  };\n  useEffect(() => {\n    getQuote();\n  }, []);\n\n  useEffect(() => {\n    textRef.current.style.color =\n    color[Math.floor(Math.random()*color.length)]\n    \n  }, [quotes]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"quote\">\n        <p ref={textRef}>{quotes.text}</p>\n        <p>Author: {quotes.author}</p>\n        <div className=\"btnContainer\">\n          <button onClick={getQuote} className=\"btn\">Get Quote</button>\n          <a\n            href={\"https://twitter.com/intent/tweet?=${quotes.text}\"}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"btn\"\n          >\n            Tweet\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}